@page "/add"
@using System.Text.Json
@using System.Text
@using Frontend.Client.Services
@inject NavigationManager NavigationManager
@inject IAirportService AirportService

<PageTitle>Watchlist</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Add Flight</MudText>
<MudText Class="mb-8">Add a new flight. The flight must have the correct flight number, departure time and departure/arrival airports.</MudText>

<MudItem sm="6">
    <MudCard>
        <MudCardContent>
            <MudAutocomplete Class="mb-5"
                             T="AirportDTO"
                             Label="Search Departure Airport"
                             @bind-Value="_origin"
                             Placeholder="Type Airport Name, IATA code or city..."
                             SearchFunc="SearchAirport"
                             ToStringFunc="@((AirportDTO a) => $"{a.Name} ({a.Code})")"
                             Error="_origin is null && _validated"
                             ErrorText="Need to select a departure airport" />

            <MudAutocomplete Class="mb-5" T="AirportDTO"
                             Label="Search Arrival Airport"
                             @bind-Value="_destination"
                             Placeholder="Type Airport Name, IATA code or city..."
                             SearchFunc="SearchAirport"
                             ToStringFunc="@((AirportDTO a) => $"{a.Name} ({a.Code})")"
                             Error="_destination is null && _validated"
                             ErrorText="Need to select an arrival airport" />

            <MudTextField Class="mb-5" T="string"
                          Label="Flight Number"
                          @bind-Value="_flightNumber"
                          Error="_flightNumber is null && _validated"
                          ErrorText="Need to enter a valid flight number e.g. XY 1234" />

            <MudDatePicker Class="mb-5" Label="Departure Date"
                           @bind-Date="_flightDate"
                           Error="_flightDate is null && _validated"
                           ErrorText="Need to select a departure date"
                           Editable="true"
                           ImmediateText="true" />

            <MudTimePicker Class="mb-5" Label="Flight Time"
                           @bind-Time="_flightTime"
                           Error="_flightTime is null && _validated"
                           ErrorText="Need to select a departure time"
                           Editable="true"
                           ImmediateText="true" />

            <MudSelect @bind-Value="_schedule" Placeholder="Select a schedule" Variant="Variant.Outlined" Label="Schedule" Error="ValidSchedule() == false && _validated" ErrorText="Need to select a valid schedule">
                <MudSelectItem Value="@("minute")">Per Minute</MudSelectItem>
                <MudSelectItem Value="@("hour")">Per Hour</MudSelectItem>
                <MudSelectItem Value="@("day")">Day of the Month</MudSelectItem>
                <MudSelectItem Value="@("weekday")">Weekday</MudSelectItem>
            </MudSelect>

            @if (_schedule == "minute")
            {
                <MudSelect @bind-Value="_minuteFrequency" Placeholder="Select a frequency" Variant="Variant.Outlined" Label="Minutes">
                    <MudSelectItem Value="@("15")">Every 15 minutes</MudSelectItem>
                    <MudSelectItem Value="@("30")">Every 30 minutes</MudSelectItem>
                </MudSelect>
            }
            else if (_schedule == "hour")
            {
                <MudSelect @bind-Value="_hourFrequency" Placeholder="Select a frequency" Variant="Variant.Outlined" Label="Hours">
                    <MudSelectItem Value="@("1")">Every hour</MudSelectItem>
                    <MudSelectItem Value="@("2")">Every 2 hours</MudSelectItem>
                    <MudSelectItem Value="@("4")">Every 4 hours</MudSelectItem>
                </MudSelect>
            }
            else if (_schedule == "day")
            {
                <MudDatePicker Label="Day" @bind-Date="_day" FixYear="@DateTime.Today.Year" FixMonth="@DateTime.Today.Month" DateFormat="dd" Editable="true" ImmediateText="true"/>
                if (_day is not null)
                {
                    <MudTimePicker Label="Time" @bind-Time="_time" TimeEditMode="TimeEditMode.Normal" Editable="true" ImmediateText="true"  />
                }
            }
            else if (_schedule == "weekday")
            {
                <MudSelect @bind-Value="_weekday" Placeholder="Select a weekday" Variant="Variant.Outlined" Label="Week day">
                    <MudSelectItem Value="@("Monday")">Monday</MudSelectItem>
                    <MudSelectItem Value="@("Tuesday")">Tuesday</MudSelectItem>
                    <MudSelectItem Value="@("Wednesday")">Wednesday</MudSelectItem>
                    <MudSelectItem Value="@("Thursday")">Thursday</MudSelectItem>
                    <MudSelectItem Value="@("Friday")">Friday</MudSelectItem>
                    <MudSelectItem Value="@("Saturday")">Saturday</MudSelectItem>
                    <MudSelectItem Value="@("Sunday")">Sunday</MudSelectItem>
                </MudSelect>
                if (_weekday != "" && _weekday is not null)
                {
                    <MudTimePicker Label="Time" @bind-Time="_time" TimeEditMode="TimeEditMode.Normal" Editable="true" ImmediateText="true" />
                }
            }
            else
            {

            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="async () => await ValidateAndSubmit()">Add Flight</MudButton>
        </MudCardActions>
    </MudCard>
</MudItem>



@code {
    private HttpClient _http = new HttpClient();
    private AirportDTO? _origin;
    private AirportDTO? _destination;
    private string? _flightNumber;
    private DateTime? _flightDate;
    private TimeSpan? _flightTime;
    private string? _schedule;
    private string? _minuteFrequency;
    private string? _hourFrequency;
    private DateTime? _day;
    private string? _weekday;
    private TimeSpan? _time;
    private string? _cronExpression;
    private bool _validated = false;

    private bool _departureInvalid = false;
    private bool _arrivalInvalid = false;
    private bool _flightNumberInvalid = false;
    private bool _flightDateInvalid = false;
    private bool _flightTimeInvalid = false;
    private bool _scheduleInvalid = false;

    protected override async Task OnInitializedAsync() {}

    private async Task<IEnumerable<AirportDTO>> SearchAirport(string query, CancellationToken token)
    {
        return await AirportService.SearchAirport(query);
    }

    private async Task ValidateAndSubmit()
    {
        _cronExpression = GenerateCronExpression();
        if (InvalidData())
            return;
        else
        {
            Dictionary<string, string> queryParams = new Dictionary<string, string>
            {
                { "originId", _origin.AirportId.ToString() },
                { "destinationId", _destination.AirportId.ToString() },
                { "flightDate", (_flightDate.GetValueOrDefault() + _flightTime.GetValueOrDefault()).ToString("s") },
                { "flightNumber", _flightNumber },
                { "cronExpression", _cronExpression }
            };

            string queryString = string.Join("&", queryParams.Select(kv => $"{kv.Key}={Uri.EscapeDataString(kv.Value)}"));
            HttpResponseMessage response = await _http.PostAsync($"https://localhost:7019/api/selenium/neworupdatejobflight?{queryString}", null);
            NavigationManager.NavigateTo("/watchlist");
        }
    }

    private bool InvalidData()
    {
        _validated = true;
        _departureInvalid = _origin is null;
        _arrivalInvalid = _destination is null;
        _flightNumberInvalid = _flightNumber is null;
        _flightDateInvalid = _flightDate is null;
        _flightTimeInvalid = _flightTime is null;
        _scheduleInvalid = _cronExpression is null || !ValidSchedule();

        return _departureInvalid || _arrivalInvalid || _flightNumberInvalid || _flightDateInvalid || _flightTimeInvalid || _scheduleInvalid;
    }

    private string GenerateCronExpression()
    {
        string minuteExpression = "*";
        string hourExpression = "*";
        string dayExpression = "*";
        string monthExpression = "*";
        string weekdayExpression = "*";

        if (_schedule == "minute")
            minuteExpression = $"*/{_minuteFrequency}";
        else if (_schedule == "hour")
        {
            int currentMinute = DateTime.Now.Minute;
            minuteExpression = $"{currentMinute}";
            hourExpression = $"*/{_hourFrequency}";
        }
        else if (_schedule == "day")
        {
            int calendarDay = _day.GetValueOrDefault().Day;
            int hoursValue = _time.GetValueOrDefault().Hours;
            int minutesValue = _time.GetValueOrDefault().Minutes;
            minuteExpression = $"{minutesValue}";
            hourExpression = $"{hoursValue}";
            dayExpression = $"{calendarDay}";
        }
        else if (_schedule == "weekday")
        {
            int hoursValue = _time.GetValueOrDefault().Hours;
            int minutesValue = _time.GetValueOrDefault().Minutes;
            minuteExpression = $"{minutesValue}";
            hourExpression = $"{hoursValue}";
            weekdayExpression = GetWeekDay(_weekday);
        }

        return $"{minuteExpression} {hourExpression} {dayExpression} {monthExpression} {weekdayExpression}";
    }

    private string GetWeekDay(string weekday)
    {
        switch (weekday)
        {
            case "Monday":
                return "0";
            case "Tuesday":
                return "1";
            case "Wednesday":
                return "2";
            case "Thursday":
                return "3";
            case "Friday":
                return "4";
            case "Saturday":
                return "5";
            case "Sunday":
                return "6";
            default:
                return "*";
        }
    }

    private bool ValidSchedule()
    {
        return (_schedule == "minute" && _minuteFrequency is not null) ||
               (_schedule == "hour" && _hourFrequency is not null) ||
               (_schedule == "day" && _day is not null && _time is not null) ||
               (_schedule == "weekday" && _weekday is not null && _time is not null);
    }
}

@page "/statistic/{id:int}"
@using System.Text.Json

<PageTitle>Statistics</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Flight Statistics</MudText>
<MudText Class="mb-8">Get various statistics for your tracked flights</MudText>
@if (_flight is null)
{
    <h1>Loading...</h1>
} 
else
{
    <h1>Statistics for @_flight.FlightNumber</h1>
    <MudItem Class="mb-10 mt-10"><h2>Prices per weekday for specific flight</h2></MudItem>
    if (_weekdaySeries is null && !_mockData)
    {
        <h4>Loading...</h4>
    }
    else if (_mockData)
    {
        <MudSwitch @bind-Value="_mockData" Label="Switch to real data"></MudSwitch>

        <MudChart ChartType="ChartType.Bar" ChartSeries="@_mockWeekdaySeries" @bind-SelectedIndex="_indexWeekday" XAxisLabels="@_xAxisLabelsWeekday" Width="100%" Height="350px" />
    }
    else
    {
        <MudSwitch @bind-Value="_mockData" Label="Switch to mocked data"></MudSwitch>

        <MudChart ChartType="ChartType.Bar" ChartSeries="@_weekdaySeries" @bind-SelectedIndex="_indexWeekday" XAxisLabels="@_xAxisLabelsWeekday" Width="100%" Height="350px" />
    }
    <MudItem Class="mb-10 mt-10"><h2>Prices per date for specific flight</h2></MudItem>
    if ((_cheapestDate is null || _mostExpensiveDate is null) && !_mockData)
    {
        <h4>Loading...</h4>
    }
    else if (_mockData)
    {
        <MudSwitch @bind-Value="_mockData" Label="Switch to real data"></MudSwitch>

        <MudGrid>
            <MudItem xs="6">
                <MudText Typo="Typo.h6" Color="Color.Error">
                    Most Expensive Date: @_mockMostExpensiveDate.ToLongDateString()
                </MudText>
            </MudItem>
            <MudItem xs="6">
                <MudText Typo="Typo.h6" Color="Color.Success">
                    Cheapest Date: @_mockCheapestDate.ToLongDateString()
                </MudText>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudSwitch @bind-Value="_mockData" Label="Switch to mocked data"></MudSwitch>

        <MudGrid>
            <MudItem xs="6">
                <MudText Typo="Typo.h6" Color="Color.Error">
                    Most Expensive Date: @_mostExpensiveDate.GetValueOrDefault().ToLongDateString()
                </MudText>
            </MudItem>
            <MudItem xs="6">
                <MudText Typo="Typo.h6" Color="Color.Success">
                    Cheapest Date: @_cheapestDate.GetValueOrDefault().ToLongDateString()
                </MudText>
            </MudItem>
        </MudGrid>
    }
    <MudItem Class="mb-10 mt-10"><h2>Prices per date until flight at @_flight.FlightDepartureTime.ToLongDateString()</h2></MudItem>
    if (_datesSeries is null && !_mockData)
    {
        <h4>Loading...</h4>
    }
    else if (_mockData)
    {
        <MudSwitch @bind-Value="_mockData" Label="Switch to real data"></MudSwitch>

        <MudChart ChartType="ChartType.Line" ChartSeries="@_mockSeriesUntilFlight" @bind-SelectedIndex="_indexWeekday" XAxisLabels="@_mockedXAxisUntilFlight.ToArray()" Width="100%" Height="350px" />
    }
    else
    {
        <MudSwitch @bind-Value="_mockData" Label="Switch to mocked data"></MudSwitch>

        <MudChart ChartType="ChartType.Line" ChartSeries="@_datesSeries" @bind-SelectedIndex="_indexDate" XAxisLabels="@_XAxisLabelsDateUntilFlight.ToArray()" Width="100%" Height="350px" />
    }
    <MudItem Class="mb-10 mt-10"><h2>Prices per date until flight with flexibility</h2></MudItem>
    <h3>Set a flexibility to also check for flights +- X days in the future/past</h3>
    <h4>(Will be executed immediately)</h4>
    <MudNumericField @bind-Value="_flexibility" Placeholder="Flexibility" Label="+/- Days"/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => GetPricesWithFlexibility()">Get Stats</MudButton>
    if (_pricesWithFlexibility is not null)
    {
        <MudChart ChartType="ChartType.Bar" ChartSeries="@_flexibleChartSeries" @bind-SelectedIndex="_indexFlexible" XAxisLabels="@_xAxisLabelsWithFlexibility.ToArray()" Width="100%" Height="350px" />
    }
}

@code {
    [Parameter]
    public int Id { get; set; }
    private HttpClient _http = new HttpClient();
    private FlightDTO? _flight;
    private int _flexibility = 0;
    private bool _mockData = true;
    private List<DayPrice> _mockPrices = new List<DayPrice>
    {
        new DayPrice { Day = new DateTime(2025, 2, 3), Min = 120.5, Avg = 150.0, Max = 180.0 },
        new DayPrice { Day = new DateTime(2025, 2, 4), Min = 115.0, Avg = 140.0, Max = 175.0 },
        new DayPrice { Day = new DateTime(2025, 2, 5), Min = 130.0, Avg = 160.0, Max = 200.0 },
        new DayPrice { Day = new DateTime(2025, 2, 6), Min = 125.0, Avg = 155.0, Max = 190.0 },
        new DayPrice { Day = new DateTime(2025, 2, 7), Min = 140.0, Avg = 170.0, Max = 210.0 },
        new DayPrice { Day = new DateTime(2025, 2, 8), Min = 135.0, Avg = 165.0, Max = 205.0 },
        new DayPrice { Day = new DateTime(2025, 2, 9), Min = 145.0, Avg = 175.0, Max = 215.0 },
        new DayPrice { Day = new DateTime(2025, 2, 10), Min = 150.0, Avg = 180.0, Max = 220.0 },
        new DayPrice { Day = new DateTime(2025, 2, 11), Min = 140.0, Avg = 165.0, Max = 210.0 },
        new DayPrice { Day = new DateTime(2025, 2, 12), Min = 155.0, Avg = 185.0, Max = 225.0 },
        new DayPrice { Day = new DateTime(2025, 2, 13), Min = 160.0, Avg = 190.0, Max = 230.0 },
        new DayPrice { Day = new DateTime(2025, 2, 14), Min = 170.0, Avg = 200.0, Max = 240.0 },
        new DayPrice { Day = new DateTime(2025, 2, 15), Min = 165.0, Avg = 195.0, Max = 235.0 },
        new DayPrice { Day = new DateTime(2025, 2, 16), Min = 175.0, Avg = 205.0, Max = 245.0 },
        new DayPrice { Day = new DateTime(2025, 2, 17), Min = 180.0, Avg = 210.0, Max = 250.0 },
        new DayPrice { Day = new DateTime(2025, 2, 18), Min = 170.0, Avg = 200.0, Max = 240.0 },
        new DayPrice { Day = new DateTime(2025, 2, 19), Min = 185.0, Avg = 215.0, Max = 255.0 },
        new DayPrice { Day = new DateTime(2025, 2, 20), Min = 190.0, Avg = 220.0, Max = 260.0 },
        new DayPrice { Day = new DateTime(2025, 2, 21), Min = 200.0, Avg = 230.0, Max = 270.0 },
        new DayPrice { Day = new DateTime(2025, 2, 22), Min = 195.0, Avg = 225.0, Max = 265.0 },
        new DayPrice { Day = new DateTime(2025, 2, 23), Min = 210.0, Avg = 240.0, Max = 280.0 }
    };
    private static double[] _mockWeekdayMin = new double[] { 140.0, 165.0, 145.0, 155.0, 172.5, 157.5, 146.66666666666666 };
    private static double[] _mockWeekdayAvg = new double[] { 170.0, 195.0, 175.0, 185.0, 202.5, 187.5, 176.66666666666666 };
    private static double[] _mockWeekdayMax = new double[] { 200.0, 225.0, 205.0, 215.0, 235.0, 217.5, 206.66666666666666 };

    private List<ChartSeries> _mockWeekdaySeries = new List<ChartSeries>
    {
        new ChartSeries {Name = "Min", Data = _mockWeekdayMin},
        new ChartSeries {Name = "Avg", Data = _mockWeekdayAvg},
        new ChartSeries {Name = "Max", Data = _mockWeekdayMax}
    };

    private List<DayPrice>? _pricesWeekday;
    private int _indexWeekday = -1;
    private string[] _xAxisLabelsWeekday = new string[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
    private double[] _minWeekday = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
    private double[] _avgWeekday = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
    private double[] _maxWeekday = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
    private List<ChartSeries>? _weekdaySeries;

    private List<DayPrice>? _pricesDate;
    private DateTime? _cheapestDate;
    private DateTime? _mostExpensiveDate;
    private DateTime _mockCheapestDate = new DateTime(2025, 2, 4);
    private DateTime _mockMostExpensiveDate = new DateTime(2025, 2, 23);

    private List<DayPrice>? _pricesDateUntilFlight;
    private int _indexDate = -1;
    private List<double> _pricesPerDayUntilFlight = new List<double>();
    private List<string> _XAxisLabelsDateUntilFlight = new List<string>();
    private List<ChartSeries>? _datesSeries;
    private static List<double> _mockedPricesUntilFlight = new List<double> { 210.0, 200.0, 215.0, 220.0, 230.0, 225.0, 240.0 };
    private List<string> _mockedXAxisUntilFlight = new List<string>
    {
        new DateTime(2025, 2, 16).ToString("d"),
        new DateTime(2025, 2, 17).ToString("d"),
        new DateTime(2025, 2, 18).ToString("d"),
        new DateTime(2025, 2, 19).ToString("d"),
        new DateTime(2025, 2, 20).ToString("d"),
        new DateTime(2025, 2, 21).ToString("d"),
        new DateTime(2025, 2, 22).ToString("d"),
    };
    private List<ChartSeries> _mockSeriesUntilFlight = new List<ChartSeries>
    {
        new ChartSeries {Data = _mockedPricesUntilFlight.ToArray()}
    };

    private List<DayPrice>? _pricesWithFlexibility;                    
    private List<string> _xAxisLabelsWithFlexibility = new List<string>();
    private List<double> _actualPriceList = new List<double>();
    private List<double> _flexiblePricesList = new List<double>();
    private List<ChartSeries>? _flexibleChartSeries;
    private int _indexFlexible = -1;


    protected override async Task OnInitializedAsync()
    {
        await GetFlight();
        await GetPricesWeekday();
        await GetPricesDate();
        await GetPricesDateUntilFlight();
    }

    private async Task GetFlight()
    {
        HttpResponseMessage response = await _http.GetAsync($"https://localhost:7019/api/Flights/{Id}");
        if (response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            _flight = JsonSerializer.Deserialize<FlightDTO>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
    }

    private async Task GetPricesWeekday()
    {
        HttpResponseMessage response = await _http.GetAsync($"https://localhost:7019/api/Flights/GetCheapestMostExpensiveWeekday,{Id}");
        if (response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"1 {content}");
            _pricesWeekday = JsonSerializer.Deserialize<List<DayPrice>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (_pricesWeekday is not null)
            {
                for (int i = 0; i < 7; i++)
                {
                    _minWeekday[i] = _pricesWeekday[i].Min;
                    _avgWeekday[i] = _pricesWeekday[i].Avg;
                    _minWeekday[i] = _pricesWeekday[i].Max;
                }
                _weekdaySeries = new List<ChartSeries>()
            {
                new ChartSeries() { Name = "Min", Data = _pricesWeekday.Select(p => p.Min).ToArray() },
                new ChartSeries() { Name = "Avg", Data = _pricesWeekday.Select(p => p.Avg).ToArray() },
                new ChartSeries() { Name = "Max", Data = _pricesWeekday.Select(p => p.Max).ToArray() }
            };
            }
        }
    }

    private async Task GetPricesDate()
    {
        HttpResponseMessage response = await _http.GetAsync($"https://localhost:7019/api/Flights/GetCheapestMostExpensiveDate,{Id}");
        if (response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"2 {content}");
            _pricesDate = JsonSerializer.Deserialize<List<DayPrice>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (_pricesDate is not null)
            {
                double maxPrice = 0.0;
                double minPrice = 100000.0;
                foreach (DayPrice dayPrice in _pricesDate)
                {
                    if (dayPrice.Avg > maxPrice)
                    {
                        maxPrice = dayPrice.Avg;
                        _mostExpensiveDate = dayPrice.Day;
                    }
                    if (dayPrice.Avg < minPrice)
                    {
                        minPrice = dayPrice.Avg;
                        _cheapestDate = dayPrice.Day;
                    }
                }
            }
        }
    }

    private async Task GetPricesDateUntilFlight()
    {
        HttpResponseMessage response = await _http.GetAsync($"https://localhost:7019/api/Flights/GetCheapestMostExpensiveDateUntilFlight,{Id}");
        if (response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"3 {content}");
            _pricesDateUntilFlight = JsonSerializer.Deserialize<List<DayPrice>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (_pricesDateUntilFlight is not null)
            {
                DateTime startDate = _pricesDateUntilFlight[0].Day.Date;
                DateTime endDate = _flight.FlightDepartureTime.Date;
                int it = 0;
                while (startDate != endDate)
                {
                    _XAxisLabelsDateUntilFlight.Add(startDate.ToString("d"));
                    double price = it < _pricesDateUntilFlight.Count() ? _pricesDateUntilFlight[it].Avg : 0.0;
                    _pricesPerDayUntilFlight.Add(price);
                    it++;
                    startDate = startDate.AddDays(1);
                }
                _datesSeries = new List<ChartSeries>
                {
                    new ChartSeries { Data = _pricesPerDayUntilFlight.Slice(_pricesPerDayUntilFlight.Count()-7, 7).ToArray()}
                };
                _XAxisLabelsDateUntilFlight = _XAxisLabelsDateUntilFlight.ToList().Slice(_pricesPerDayUntilFlight.Count() - 7, 7);
            }
        }
    }

    private async Task GetPricesWithFlexibility()
    {
        Dictionary<string, string> queryParams = new()
            {
                { "originId", _flight.Origin.AirportId.ToString() },
                { "destinationId", _flight.Destination.AirportId.ToString() },
                { "flightDate", _flight.FlightDepartureTime.ToString("s") },
                { "flightNumber", _flight.FlightNumber },
                { "flexibility", _flexibility.ToString() }
            };
        string queryString = string.Join("&", queryParams.Select(kv => $"{kv.Key}={Uri.EscapeDataString(kv.Value)}"));
        HttpResponseMessage response = await _http.GetAsync($"https://localhost:7019/api/selenium/getcheapestmostexpensivedatewithflexibility?{queryString}");
        if (response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"4 {content}");
            _pricesWithFlexibility = JsonSerializer.Deserialize<List<DayPrice>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (_pricesWithFlexibility is not null)
            {
                int count = _pricesWithFlexibility.Count();
                int idx = _pricesWithFlexibility.FindIndex(p => p.Day == _flight.FlightDepartureTime);
                if (idx == -1) return;
                for (int i = 0; i < count; i++)
                {
                    if (idx == i)
                    {
                        _actualPriceList.Add(_pricesWithFlexibility[i].Avg);
                        _flexiblePricesList.Add(0.0);
                    }
                    else
                    {
                        _actualPriceList.Add(0.0);
                        _flexiblePricesList.Add(_pricesWithFlexibility[i].Avg);
                    }
                    _xAxisLabelsWithFlexibility.Add(_pricesWithFlexibility[i].Day.ToShortTimeString());
                }
                _flexibleChartSeries = new List<ChartSeries>
                {
                    new ChartSeries {Name = "Actual", Data = _actualPriceList.ToArray() },
                    new ChartSeries {Name = "Flexible", Data = _flexiblePricesList.ToArray()}
                };
            }
        }
    }
}

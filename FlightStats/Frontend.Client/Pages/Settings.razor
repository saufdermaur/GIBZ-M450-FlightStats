@page "/settings/{id:int}"
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Settings</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Flight Settings</MudText>
<MudText Class="mb-8">Configure the schedule for fetching the latest flight data or remove the flight</MudText>

<MudText Class="mb-3" Typo="Typo.h4">Update Schedule</MudText>

<MudSelect @bind-Value="_schedule" Placeholder="Select a schedule" Variant="Variant.Outlined" Label="Schedule">
    <MudSelectItem Value="@("minute")">Per Minute</MudSelectItem>
    <MudSelectItem Value="@("hour")">Per Hour</MudSelectItem>
    <MudSelectItem Value="@("day")">Day of the Month</MudSelectItem>
    <MudSelectItem Value="@("weekday")">Weekday</MudSelectItem>
</MudSelect>

@if (_schedule == "minute") {
    <MudSelect @bind-Value="_minuteFrequency" Placeholder="Select a frequency" Variant="Variant.Outlined" Label="Minutes">
        <MudSelectItem Value="@("15")">Every 15 minutes</MudSelectItem>
        <MudSelectItem Value="@("30")">Every 30 minutes</MudSelectItem>
    </MudSelect>
}
else if (_schedule == "hour")
{
    <MudSelect @bind-Value="_hourFrequency" Placeholder="Select a frequency" Variant="Variant.Outlined" Label="Hours">
        <MudSelectItem Value="@("1")">Every hour</MudSelectItem>
        <MudSelectItem Value="@("2")">Every 2 hours</MudSelectItem>
        <MudSelectItem Value="@("4")">Every 4 hours</MudSelectItem>
    </MudSelect>
} else if (_schedule == "day") {
    <MudDatePicker Label="Day" @bind-Date="_day" FixYear="@DateTime.Today.Year" FixMonth="@DateTime.Today.Month" DateFormat="dd" />
    if (_day is not null)
    {
        <MudTimePicker Label="Time" @bind-Time="_time" TimeEditMode="TimeEditMode.Normal" />
    }
} else if (_schedule == "weekday") {
    <MudSelect @bind-Value="_weekday" Placeholder="Select a weekday" Variant="Variant.Outlined" Label="Week day">
        <MudSelectItem Value="@("Monday")">Monday</MudSelectItem>
        <MudSelectItem Value="@("Tuesday")">Tuesday</MudSelectItem>
        <MudSelectItem Value="@("Wednesday")">Wednesday</MudSelectItem>
        <MudSelectItem Value="@("Thursday")">Thursday</MudSelectItem>
        <MudSelectItem Value="@("Friday")">Friday</MudSelectItem>
        <MudSelectItem Value="@("Saturday")">Saturday</MudSelectItem>
        <MudSelectItem Value="@("Sunday")">Sunday</MudSelectItem>
    </MudSelect>
    if (_weekday != "" && _weekday is not null) {
        <MudTimePicker Label="Time" @bind-Time="_time" TimeEditMode="TimeEditMode.Normal" />
    }
} else {

}

@if (DisplayUpdateButton())
{
    <br />
    <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Update" OnClick="async () => await UpdateSchedule()">Update Schedule</MudButton>
}

<MudText Class="mb-3 mt-5" Typo="Typo.h4">Remove Flight</MudText>
<MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteFlightConfirmation()">Delete Flight</MudButton>

@code {
    [Parameter]
    public int Id { get; set; }
    private string _schedule;
    private string _minuteFrequency;
    private string _hourFrequency;
    private DateTime? _day;
    private string _weekday;
    private TimeSpan? _time;
    private HttpClient _http = new HttpClient();
    private FlightDTO _flight;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await _http.GetAsync($"https://localhost:7019/api/Flights/{Id}");
        if (response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            _flight = JsonSerializer.Deserialize<FlightDTO>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
    }

    private async Task DeleteFlightConfirmation()
    {
        DialogParameters<DeleteDialog> parameters = new ()
        {
            { x => x.ContentText, "Do you really want to delete this flight? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        DialogOptions options = new() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        MudBlazor.IDialogReference dialog = await DialogService.ShowAsync<DeleteDialog>("Delete", parameters, options);
        DialogResult result = await dialog.Result;

        if (!result.Canceled)
            await DeleteFlight();
    }

    private bool DisplayUpdateButton()
    {
        return (_schedule == "minute" && _minuteFrequency is not null) ||
               (_schedule == "hour" && _hourFrequency is not null) ||
               (_schedule == "day" && _day is not null && _time is not null) ||
               (_schedule == "weekday" && _weekday is not null && _time is not null);
    }

    private async Task DeleteFlight()
    {
        HttpResponseMessage response = await _http.DeleteAsync($"https://localhost:7019/api/Selenium/DeleteJobFlightAndAllInfo,{Id}");
        if (response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("/watchlist");
    }

    private async Task UpdateSchedule()
    {
        string cronExpression = GenerateCronExpression();
        Dictionary<string, string> queryParams = new()
            {
                { "originId", _flight.Origin.AirportId.ToString() },
                { "destinationId", _flight.Destination.AirportId.ToString() },
                { "flightDate", _flight.FlightDepartureTime.ToString("s") },
                { "flightNumber", _flight.FlightNumber },
                { "cronExpression", cronExpression }
            };
        string queryString = string.Join("&", queryParams.Select(kv => $"{kv.Key}={Uri.EscapeDataString(kv.Value)}"));
        Console.WriteLine(queryString);
        HttpResponseMessage response = await _http.PostAsync($"https://localhost:7019/api/selenium/neworupdatejobflight?{queryString}", null);
        NavigationManager.NavigateTo("/watchlist");

    }

    private string GenerateCronExpression()
    {
        string minuteExpression = "*";
        string hourExpression = "*";
        string dayExpression = "*";
        string monthExpression = "*";
        string weekdayExpression = "*";

        if (_schedule == "minute")
            minuteExpression = $"*/{_minuteFrequency}";
        else if (_schedule == "hour")
        {
            int currentMinute = DateTime.Now.Minute;
            minuteExpression = $"{currentMinute}";
            hourExpression = $"*/{_hourFrequency}";
        } else if (_schedule == "day")
        {
            int calendarDay = _day.GetValueOrDefault().Day;
            int hoursValue = _time.GetValueOrDefault().Hours;
            int minutesValue = _time.GetValueOrDefault().Minutes;
            minuteExpression = $"{minutesValue}";
            hourExpression = $"{hoursValue}";
            dayExpression = $"{calendarDay}";
        } else if (_schedule == "weekday")
        {
            int hoursValue = _time.GetValueOrDefault().Hours;
            int minutesValue = _time.GetValueOrDefault().Minutes;
            minuteExpression = $"{minutesValue}";
            hourExpression = $"{hoursValue}";
            weekdayExpression = GetWeekDay(_weekday);
        }

        return $"{minuteExpression} {hourExpression} {dayExpression} {monthExpression} {weekdayExpression}";
    }

    private string GetWeekDay(string weekday)
    {
        switch (weekday)
        {
            case "Monday":
                return "0";
            case "Tuesday":
                return "1";
            case "Wednesday":
                return "2";
            case "Thursday":
                return "3";
            case "Friday":
                return "4";
            case "Saturday":
                return "5";
            case "Sunday":
                return "6";
            default:
                return "*";
        }
    }
}
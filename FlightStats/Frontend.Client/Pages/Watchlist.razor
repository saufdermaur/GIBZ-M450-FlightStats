@page "/watchlist"
@using System.Text.Json
@inject NavigationManager NavigationManager

<PageTitle>Watchlist</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Flights Watchlist</MudText>
<MudText Class="mb-8">Add new flights, modify tracking schedules and get price statistics</MudText>

<MudButton Class="mb-3" Variant="Variant.Filled" Color="Color.Success" OnClick="() => NavigateToAddFlight()">Add new flight</MudButton>
<br />

@if (flights == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="flights" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Flight Number</MudTh>
            <MudTh>Departure</MudTh>
            <MudTh>Arrival</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.FlightDepartureTime.Date.ToString("d")</MudTd>
            <MudTd DataLabel="Flight Number">@context.FlightNumber</MudTd>
            <MudTd DataLabel="Departure">@context.Origin.Name (@context.Origin.Code)</MudTd>
            <MudTd DataLabel="Arrival">@context.Destination.Name (@context.Destination.Code)</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.QueryStats" OnClick="() => NavigateToStatistic(context.FlightId)"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="() => NavigateToSettings(context.FlightId)"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private HttpClient Http = new HttpClient();
    private List<FlightDTO>? flights = new List<FlightDTO>();

    protected override async Task OnInitializedAsync() => await GetFlights();

    private async Task GetFlights() {
        var response = await Http.GetAsync("https://localhost:7019/api/Flights");
        if (response.IsSuccessStatusCode) {
            var content = await response.Content.ReadAsStringAsync();
            flights = JsonSerializer.Deserialize<List<FlightDTO>>(content, new JsonSerializerOptions{PropertyNameCaseInsensitive = true});
        } else {
            Console.WriteLine(response.StatusCode);
        }
    }

    private void NavigateToSettings(int id)
    {
        NavigationManager.NavigateTo($"settings/{id}");
    }

    private void NavigateToStatistic(int id)
    {
        NavigationManager.NavigateTo($"statistic/{id}");
    }

    private void NavigateToAddFlight()
    {
        NavigationManager.NavigateTo("add");
    }
}
